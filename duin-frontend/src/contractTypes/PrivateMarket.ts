/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PrivateMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptBid"
      | "bidNullifiers"
      | "bids"
      | "owner"
      | "placeBid"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdrawBid"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BidAccepted"
      | "BidPlaced"
      | "BidWithdrawn"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bidNullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "bids", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "placeBid", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBid",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidNullifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBid",
    data: BytesLike
  ): Result;
}

export namespace BidAcceptedEvent {
  export type InputTuple = [bidder: AddressLike, amount: BigNumberish];
  export type OutputTuple = [bidder: string, amount: bigint];
  export interface OutputObject {
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    bidder: AddressLike,
    bidNullifier: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    bidder: string,
    bidNullifier: string,
    amount: bigint
  ];
  export interface OutputObject {
    bidder: string;
    bidNullifier: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidWithdrawnEvent {
  export type InputTuple = [bidder: AddressLike, amount: BigNumberish];
  export type OutputTuple = [bidder: string, amount: bigint];
  export interface OutputObject {
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivateMarket extends BaseContract {
  connect(runner?: ContractRunner | null): PrivateMarket;
  waitForDeployment(): Promise<this>;

  interface: PrivateMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptBid: TypedContractMethod<
    [bidNullifier: BytesLike, currentOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  bidNullifiers: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  bids: TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { bidNullifier: string; amount: bigint }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  placeBid: TypedContractMethod<[bidNullifier: BytesLike], [void], "payable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawBid: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptBid"
  ): TypedContractMethod<
    [bidNullifier: BytesLike, currentOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bidNullifiers"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "bids"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { bidNullifier: string; amount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<[bidNullifier: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawBid"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BidAccepted"
  ): TypedContractEvent<
    BidAcceptedEvent.InputTuple,
    BidAcceptedEvent.OutputTuple,
    BidAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "BidWithdrawn"
  ): TypedContractEvent<
    BidWithdrawnEvent.InputTuple,
    BidWithdrawnEvent.OutputTuple,
    BidWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "BidAccepted(address,uint256)": TypedContractEvent<
      BidAcceptedEvent.InputTuple,
      BidAcceptedEvent.OutputTuple,
      BidAcceptedEvent.OutputObject
    >;
    BidAccepted: TypedContractEvent<
      BidAcceptedEvent.InputTuple,
      BidAcceptedEvent.OutputTuple,
      BidAcceptedEvent.OutputObject
    >;

    "BidPlaced(address,bytes32,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "BidWithdrawn(address,uint256)": TypedContractEvent<
      BidWithdrawnEvent.InputTuple,
      BidWithdrawnEvent.OutputTuple,
      BidWithdrawnEvent.OutputObject
    >;
    BidWithdrawn: TypedContractEvent<
      BidWithdrawnEvent.InputTuple,
      BidWithdrawnEvent.OutputTuple,
      BidWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
